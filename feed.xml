<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://kkan0615.github.io/</id><title>Youngjin_Kwak</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2022-12-04T20:45:33-05:00</updated> <author> <name>Youngjin_kwak</name> <uri>https://kkan0615.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://kkan0615.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://kkan0615.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator> <rights> © 2022 Youngjin_kwak </rights> <icon>//assets/img/favicons/favicon.ico</icon> <logo>//assets/img/favicons/favicon-96x96.png</logo> <entry><title>How to create UDP server with Node.js.</title><link href="https://kkan0615.github.io/posts/ko-node-udp-server/" rel="alternate" type="text/html" title="How to create UDP server with Node.js." /><published>2022-12-04T07:30:00-05:00</published> <updated>2022-12-04T20:45:05-05:00</updated> <id>https://kkan0615.github.io/posts/ko-node-udp-server/</id> <content src="https://kkan0615.github.io/posts/ko-node-udp-server/" /> <author> <name>Youngjin Kwak</name> </author> <category term="nodejs" /> <summary> Overview This article is going to talk about how to use UDP server in Node.js. The codes in this article are written by Typescript. There will be two examples such as Server and Client. Setup project Setup Typescript project. You can pass this step npm init -y start Node.js package npm i ts-node ts-node is used for running typescript file without compiling Setup server imp... </summary> </entry> <entry><title>Express JS + Typescript 로깅 시스템</title><link href="https://kkan0615.github.io/posts/ko-winston/" rel="alternate" type="text/html" title="Express JS + Typescript 로깅 시스템" /><published>2022-11-26T23:21:00-05:00</published> <updated>2022-11-27T12:39:56-05:00</updated> <id>https://kkan0615.github.io/posts/ko-winston/</id> <content src="https://kkan0615.github.io/posts/ko-winston/" /> <author> <name>Youngjin Kwak</name> </author> <category term="expressjs" /> <category term="typescript" /> <category term="nodejs" /> <summary> Overview winston 라이브러리를 사용해서 로깅 시스템을 만들 것입니다. winston은 node js에서 사용 할 수 있는 logger 입니다. 기본적으로 많은 기능을 제공하기 때문에, winston은 많은 곳에서 사용 되고 있습니다. 이 포스팅은 3.8.2 버전을 사용 중에 있습니다. winston 설치 npm install winston Winston 설정 일단 Typescript 파일을 하나 만들어 줍니다. 이 포스팅의 경우 logger.ts라는 이름을 사용했습니다. 일단 풀 코드를 보고 해당 내용에 대한 설명은 아래에 적어 두었습니다. import winston from 'winston' const colors = { error: 'red', warn: 'yellow'... </summary> </entry> <entry><title>Alternative way of "git checkout"</title><link href="https://kkan0615.github.io/posts/alternative-git-checkout/" rel="alternate" type="text/html" title="Alternative way of "git checkout"" /><published>2022-11-10T05:21:00-05:00</published> <updated>2022-11-12T13:45:01-05:00</updated> <id>https://kkan0615.github.io/posts/alternative-git-checkout/</id> <content src="https://kkan0615.github.io/posts/alternative-git-checkout/" /> <author> <name>Youngjin Kwak</name> </author> <category term="git" /> <summary> What is “checkout” checkout is used for switch branch or restore working tree files. # Move to specific branch git checkout &amp;lt;branch-name&amp;gt; # Create new branch and then move to that branch git checkout -b &amp;lt;new-branch&amp;gt; Alternative checkout command is seperated to two commands, switch and restore. These commands are introduced Git v2.23. switch command switch command helps to switch s... </summary> </entry> <entry><title>React에서 조건문으로 랜더링시 "&amp;&amp;" 사용하지 맙시다</title><link href="https://kkan0615.github.io/posts/ko-stop-using-andand-in-react/" rel="alternate" type="text/html" title="React에서 조건문으로 랜더링시 "&amp;&amp;" 사용하지 맙시다" /><published>2022-11-05T03:30:00-04:00</published> <updated>2022-11-12T13:03:20-05:00</updated> <id>https://kkan0615.github.io/posts/ko-stop-using-andand-in-react/</id> <content src="https://kkan0615.github.io/posts/ko-stop-using-andand-in-react/" /> <author> <name>Youngjin Kwak</name> </author> <category term="korean" /> <category term="react" /> <summary> Overview React 내에서 조건적으로 Rendering 하는 방법은 많습니다. 그중에서 이 포스팅은 “&amp;amp;&amp;amp;”을 이용한 조건 Rendering 에 관한 이야기를 할 것입니다. “&amp;amp;&amp;amp;” 을 사용하여 Rendering 할 경우 코드는 가독성은 좋지만, 가끔 UI 버그를 유발하는 경우가 있습니다. 그래서 이 포스팅은 왜 “&amp;amp;&amp;amp;” 을 사용하지 말아야하는 것과 사용 하더라도 어떻게 잘 사용해야 할까에 대한 내용을 담고 있습니다. “&amp;amp;&amp;amp;” React 내에서 사용하는 법 interface Prop { condition: boolean } const MyComponent = ({ condition }: Prop) =&amp;gt; { return ... </summary> </entry> <entry><title>Javascript Bigint</title><link href="https://kkan0615.github.io/posts/js-bigint/" rel="alternate" type="text/html" title="Javascript Bigint" /><published>2022-10-29T05:21:00-04:00</published> <updated>2022-10-29T17:44:18-04:00</updated> <id>https://kkan0615.github.io/posts/js-bigint/</id> <content src="https://kkan0615.github.io/posts/js-bigint/" /> <author> <name>Youngjin Kwak</name> </author> <category term="javascript" /> <summary> Overview Bigint is a built-in object and introduced in ES2020. Bigint is a primitive type like number, string, symbol boolean, undefined, and null. It means Bigint is a new javascript primitive type, not a int. Bigint provides a way to represent whole numbers larger than 2^53-1. 2^53 - 1 can be represented by MAX_SAFE_INTEGER constant. How to create big int Bigint can be created by two ways. ... </summary> </entry> </feed>
